{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from gs://neural-guidance-tensorflow/export/0315_series5a_sr50_l40_aTrue_tng-tpu-02/1552773431/variables/variables\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.contrib import predictor\n",
    "\n",
    "export_dir = \"gs://neural-guidance-tensorflow/export/0315_series5a_sr50_l40_aTrue_tng-tpu-02/1552773431/\"\n",
    "predict_fn = predictor.from_saved_model(export_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys \n",
    "sys.path.insert(0,'..')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from cnf_dataset import clauses_to_matrix\n",
    "from dpll import DPLL, RandomClauseDPLL, MostCommonVarDPLL, RandomVarDPLL\n",
    "from cnf import get_random_kcnf, CNF, get_sats_SR, get_pos_SR\n",
    "from tqdm import tqdm\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from collections import defaultdict\n",
    "\n",
    "def jw(clauses):\n",
    "    score = defaultdict(int)\n",
    "\n",
    "    for clause in clauses:\n",
    "        for l in clause:\n",
    "            score[l] += 2. ** (-len(clause))\n",
    "\n",
    "    return max(score, key=score.get)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "LIMIT_RUNS = 1000000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shorten_cnf(cnf: CNF):\n",
    "    for c in cnf.clauses:\n",
    "        if len(c) == 1:\n",
    "            # print(\"Chosen lone clause\", c[0])\n",
    "            return shorten_cnf(cnf.set_var(c[0]))\n",
    "    all_literals = set(x\n",
    "                       for clause in cnf.clauses\n",
    "                       for x in clause)\n",
    "    for v in cnf.vars:\n",
    "        if v in all_literals and (-v) not in all_literals:\n",
    "            # print(\"Chosen lone literal\", v)\n",
    "            return shorten_cnf(cnf.set_var(v))\n",
    "        if (-v) in all_literals and v not in all_literals:\n",
    "            # print(\"Chosen lone literal\", -v)\n",
    "            return shorten_cnf(cnf.set_var(-v))\n",
    "    return cnf\n",
    "\n",
    "def make_normalized(cls):\n",
    "    class NormalizedDPLL(cls):\n",
    "        def run(self, cnf: CNF):\n",
    "            assert isinstance(cnf, CNF)\n",
    "            self.number_of_runs += 1\n",
    "            if self.number_of_runs > LIMIT_RUNS:\n",
    "                return None\n",
    "            \n",
    "            cnf = shorten_cnf(cnf)\n",
    "            if cnf.is_true():\n",
    "                return []\n",
    "            elif cnf.is_false():\n",
    "                return None\n",
    "\n",
    "            sug_var = self.suggest(cnf)\n",
    "            sug_cnf = cnf.set_var(sug_var)\n",
    "\n",
    "            sug_res = self.run(sug_cnf)\n",
    "            if sug_res is not None:\n",
    "                return [sug_var] + sug_res\n",
    "\n",
    "            not_sug_cnf = cnf.set_var(-sug_var)\n",
    "            not_sug_res = self.run(not_sug_cnf)\n",
    "            if not_sug_res is not None:\n",
    "                self.number_of_errors += 1\n",
    "                return [-sug_var] + not_sug_res\n",
    "            return None\n",
    "    NormalizedDPLL.__name__ = \"Normalized{}\".format(cls.__name__)\n",
    "    return NormalizedDPLL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.set_printoptions(precision=3, suppress=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import os\n",
    "\n",
    "BATCH_SIZE = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Because we have to pass full batch\n",
    "\n",
    "logfile = open(\"/tmp/log_2\", \"w\")\n",
    "#import sys\n",
    "#logfile = sys.stdout\n",
    "\n",
    "class GraphBasedDPLL(DPLL):\n",
    "    def suggest(self, input_cnf: CNF):\n",
    "        clause_num = len(input_cnf.clauses)\n",
    "        var_num = max(input_cnf.vars)\n",
    "        inputs = np.asarray([clauses_to_matrix(input_cnf.clauses, clause_num, var_num)] * BATCH_SIZE)\n",
    "        \n",
    "        policy_probs = predict_fn({\"input\": inputs})['policy_probabilities']\n",
    "        \n",
    "        print(\"CNF:\", input_cnf, end=' ', file=logfile)\n",
    "        print('cnf_clauses[0]', input_cnf.clauses, end=' ', file=logfile)\n",
    "        print(\"probs:\\n\",  policy_probs[0], end='\\n', file=logfile)\n",
    "        \n",
    "        best_prob = 0.0\n",
    "        best_svar = None\n",
    "        for var in input_cnf.vars:\n",
    "            for svar in [var, -var]:\n",
    "                svar_prob = policy_probs[0][var-1][0 if svar > 0 else 1]\n",
    "                print(svar, svar_prob, best_prob, file=logfile)\n",
    "                if svar_prob > best_prob:\n",
    "                    best_prob = svar_prob\n",
    "                    best_svar = svar\n",
    "        print(\"best_svar:\", best_svar, file=logfile)\n",
    "        # print(\"Chosen neural\", best_svar)\n",
    "        return best_svar\n",
    "\n",
    "class MostCommonDPLL(DPLL):\n",
    "    def suggest(self, cnf: CNF):\n",
    "        counter = Counter()\n",
    "        for clause in cnf.clauses:\n",
    "            for svar in clause:\n",
    "                counter[svar] += 1\n",
    "        return counter.most_common(1)[0][0]\n",
    "    \n",
    "class JeroslawDPLL(DPLL):\n",
    "    def suggest(self, cnf: CNF):\n",
    "        return jw(cnf.clauses)\n",
    "    \n",
    "\n",
    "class HumbleDPLL(DPLL):\n",
    "    def suggest(self, input_cnf: CNF):\n",
    "        clause_num = len(input_cnf.clauses)\n",
    "        var_num = max(input_cnf.vars)\n",
    "        inputs = np.asarray([clauses_to_matrix(input_cnf.clauses, clause_num, var_num)] * BATCH_SIZE)\n",
    "        \n",
    "        output = predict_fn({\"input\": inputs})\n",
    "        policy_probs = output['policy_probabilities']\n",
    "        sat_prob = output['sat_probabilities'][0]\n",
    "        \n",
    "        best_prob = 0.0\n",
    "        best_svar = None\n",
    "        for var in input_cnf.vars:\n",
    "            for svar in [var, -var]:\n",
    "                svar_prob = policy_probs[0][var-1][0 if svar > 0 else 1]\n",
    "                #print(svar, svar_prob, best_prob, file=logfile)\n",
    "                if svar_prob > best_prob:\n",
    "                    best_prob = svar_prob\n",
    "                    best_svar = svar\n",
    "        if sat_prob < 0.3:\n",
    "            # Overwriting with JW\n",
    "            best_svar = jw(input_cnf.clauses)\n",
    "        return best_svar    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "NormalizedGraphBasedDPLL = make_normalized(GraphBasedDPLL)\n",
    "NormalizedMostCommonDPLL = make_normalized(MostCommonDPLL)\n",
    "NormalizedJeroslawDPLL = make_normalized(JeroslawDPLL)\n",
    "NormalizedHumbleDPLL = make_normalized(HumbleDPLL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "class FastHumbleDPLL(DPLL):\n",
    "    def run(self, cnf: CNF, fast=False):\n",
    "        assert isinstance(cnf, CNF)\n",
    "        self.number_of_runs += 1\n",
    "        if self.number_of_runs > LIMIT_RUNS:\n",
    "            return None\n",
    "\n",
    "        cnf = shorten_cnf(cnf)\n",
    "        if cnf.is_true():\n",
    "            return []\n",
    "        elif cnf.is_false():\n",
    "            return None\n",
    "\n",
    "        switch_to_heuristic, sug_var = self.suggest(cnf, fast)\n",
    "        sug_cnf = cnf.set_var(sug_var)\n",
    "\n",
    "        sug_res = self.run(sug_cnf, switch_to_heuristic)\n",
    "        if sug_res is not None:\n",
    "            return [sug_var] + sug_res\n",
    "\n",
    "        not_sug_cnf = cnf.set_var(-sug_var)\n",
    "        not_sug_res = self.run(not_sug_cnf, switch_to_heuristic)\n",
    "        if not_sug_res is not None:\n",
    "            self.number_of_errors += 1\n",
    "            return [-sug_var] + not_sug_res\n",
    "        return None\n",
    "\n",
    "    def suggest(self, input_cnf: CNF, fast):\n",
    "        if not fast:\n",
    "            clause_num = len(input_cnf.clauses)\n",
    "            var_num = max(input_cnf.vars)\n",
    "            inputs = np.asarray([clauses_to_matrix(input_cnf.clauses, clause_num, var_num)] * BATCH_SIZE)\n",
    "\n",
    "            output = predict_fn({\"input\": inputs})\n",
    "            policy_probs = output['policy_probabilities']\n",
    "            sat_prob = output['sat_probabilities'][0]\n",
    "\n",
    "            best_prob = 0.0\n",
    "            best_svar = None\n",
    "            for var in input_cnf.vars:\n",
    "                for svar in [var, -var]:\n",
    "                    svar_prob = policy_probs[0][var-1][0 if svar > 0 else 1]\n",
    "                    #print(svar, svar_prob, best_prob, file=logfile)\n",
    "                    if svar_prob > best_prob:\n",
    "                        best_prob = svar_prob\n",
    "                        best_svar = svar\n",
    "        if fast or sat_prob < 0.3:\n",
    "            # Overwriting with JW\n",
    "            best_svar = jw(input_cnf.clauses)\n",
    "        return (fast or sat_prob < 0.3), best_svar    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_steps(sats, dpll_cls):\n",
    "    steps = []\n",
    "    errors = []\n",
    "    solved = 0\n",
    "    for sat in tqdm(sats):\n",
    "        dpll = dpll_cls()\n",
    "        res = dpll.run(sat)\n",
    "        # assert res is not None\n",
    "        if res is not None:\n",
    "            steps.append(dpll.number_of_runs)\n",
    "            errors.append(dpll.number_of_errors)\n",
    "            solved += 1\n",
    "    print(\"Within {} steps solved {} problems out of {}\".format(LIMIT_RUNS, solved, len(sats)))\n",
    "    return steps, errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_and_print_steps(sats, dpll_cls):\n",
    "    print(dpll_cls.__name__)\n",
    "    steps, errors = compute_steps(sats, dpll_cls)\n",
    "    print(\"#Sats: {}; avg step: {:.2f}; stdev step: {:.2f}; avg error: {:.2f}; stdev error: {:.2f}\".format(\n",
    "        len(steps), np.mean(steps), np.std(steps), np.mean(errors), np.std(errors)))\n",
    "    print(\"Table: \", steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_all(s, n, m, light=False):\n",
    "    # def get_sats_SR(sample_number, min_variable_number, clause_number, max_variable_number=None):\n",
    "    global S, N, M\n",
    "    S = s\n",
    "    N = n # number of clauses\n",
    "    M = m # number of variables\n",
    "    \n",
    "    MAX_TRIES = 100000\n",
    "    sats = []\n",
    "    \n",
    "    random.seed(1)\n",
    "    np.random.seed(1)\n",
    "    \n",
    "    for index in range(MAX_TRIES):\n",
    "        if len(sats) >= S:\n",
    "            break\n",
    "        sat = get_pos_SR(M, M, N)\n",
    "        # if DPLL().run(sat) is not None:\n",
    "        sats.append(sat)\n",
    "    assert len(sats) == S\n",
    "    # sats = get_sats_SR(S,M,N)\n",
    "    # for sat in sats:\n",
    "    #    print(sat)\n",
    "    # assert len(sats) == S\n",
    "    print(\"We have generated {} formulas\".format(len(sats)))\n",
    "    compute_and_print_steps(sats, FastHumbleDPLL)\n",
    "    # if not light:\n",
    "    #     compute_and_print_steps(sats, NormalizedMostCommonDPLL)\n",
    "    compute_and_print_steps(sats, NormalizedJeroslawDPLL)\n",
    "    # compute_and_print_steps(sats, NormalizedHumbleDPLL)\n",
    "    # if not light:\n",
    "    #     compute_and_print_steps(sats, NormalizedGraphBasedDPLL)\n",
    "\n",
    "    logfile.flush()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/100 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have generated 100 formulas\n",
      "FastHumbleDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:56<00:00,  2.60it/s]\n",
      "100%|██████████| 100/100 [00:00<00:00, 595.41it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 5.56; stdev step: 1.86; avg error: 0.03; stdev error: 0.17\n",
      "Table:  [7, 5, 4, 7, 4, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 8, 6, 5, 6, 7, 8, 3, 7, 4, 6, 6, 5, 5, 12, 6, 4, 3, 5, 5, 5, 5, 7, 3, 5, 12, 6, 3, 4, 5, 6, 6, 4, 5, 4, 5, 4, 4, 6, 4, 4, 7, 6, 5, 6, 6, 6, 6, 7, 5, 6, 5, 5, 7, 4, 6, 8, 6, 7, 6, 6, 4, 4, 5, 7, 17, 5, 6, 4, 5, 4, 5, 6, 5, 5, 5, 4, 6, 5, 5, 3, 6, 6, 5, 6, 7]\n",
      "NormalizedJeroslawDPLL\n",
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 7.33; stdev step: 3.55; avg error: 0.50; stdev error: 0.57\n",
      "Table:  [8, 6, 9, 4, 6, 6, 7, 5, 5, 5, 15, 8, 5, 3, 6, 5, 6, 5, 11, 4, 5, 22, 7, 5, 6, 13, 6, 15, 11, 6, 5, 3, 7, 7, 5, 5, 5, 5, 6, 12, 16, 5, 4, 7, 7, 3, 4, 3, 5, 7, 6, 12, 12, 18, 9, 7, 8, 8, 6, 7, 6, 5, 7, 9, 4, 10, 9, 4, 6, 4, 7, 6, 10, 5, 8, 7, 11, 7, 5, 11, 6, 7, 5, 8, 7, 15, 6, 4, 12, 8, 5, 19, 9, 6, 6, 5, 10, 6, 5, 4]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "print_all(100, 200, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hi\n"
     ]
    }
   ],
   "source": [
    "print(\"hi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/100 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have generated 100 formulas\n",
      "FastHumbleDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [01:09<00:00,  1.39it/s]\n",
      " 11%|█         | 11/100 [00:00<00:00, 104.27it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 14.81; stdev step: 14.48; avg error: 0.19; stdev error: 0.42\n",
      "Table:  [8, 9, 6, 5, 10, 7, 10, 7, 9, 24, 8, 11, 8, 7, 7, 11, 12, 34, 43, 12, 8, 8, 8, 14, 11, 9, 61, 37, 7, 9, 7, 50, 11, 11, 9, 14, 10, 7, 11, 16, 37, 7, 13, 9, 83, 16, 12, 8, 23, 11, 11, 6, 8, 9, 31, 9, 10, 10, 10, 11, 8, 10, 46, 12, 35, 9, 7, 5, 21, 85, 9, 8, 11, 4, 8, 8, 8, 11, 7, 31, 8, 9, 9, 8, 14, 10, 9, 11, 10, 10, 6, 8, 13, 12, 6, 9, 24, 12, 42, 8]\n",
      "NormalizedJeroslawDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:00<00:00, 109.06it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 18.65; stdev step: 11.41; avg error: 1.14; stdev error: 0.72\n",
      "Table:  [7, 25, 14, 8, 20, 9, 6, 20, 26, 42, 28, 6, 34, 6, 23, 10, 29, 23, 14, 11, 8, 8, 9, 14, 21, 6, 7, 25, 6, 9, 16, 31, 9, 9, 6, 19, 10, 13, 8, 12, 29, 9, 20, 26, 24, 32, 9, 26, 22, 21, 21, 11, 27, 30, 30, 18, 18, 22, 28, 37, 13, 13, 31, 10, 38, 22, 8, 29, 32, 63, 8, 15, 5, 5, 8, 10, 7, 14, 8, 11, 21, 34, 9, 11, 42, 11, 7, 47, 25, 17, 9, 8, 41, 21, 27, 44, 19, 9, 32, 14]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "print_all(100, 200, 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/100 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have generated 100 formulas\n",
      "FastHumbleDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [02:00<00:00,  1.20it/s]\n",
      "  4%|▍         | 4/100 [00:00<00:02, 39.96it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 26.56; stdev step: 39.80; avg error: 0.20; stdev error: 0.42\n",
      "Table:  [7, 76, 42, 13, 15, 89, 16, 15, 6, 12, 11, 12, 9, 12, 17, 21, 107, 11, 9, 9, 104, 15, 17, 14, 28, 13, 12, 12, 195, 15, 13, 8, 9, 15, 15, 106, 7, 13, 62, 15, 14, 9, 128, 10, 9, 17, 12, 9, 11, 12, 73, 9, 9, 207, 80, 50, 9, 9, 11, 13, 13, 10, 15, 10, 8, 19, 11, 11, 7, 16, 7, 198, 15, 13, 9, 9, 7, 14, 72, 11, 11, 14, 13, 17, 10, 9, 10, 10, 10, 9, 10, 11, 7, 9, 88, 11, 9, 6, 10, 9]\n",
      "NormalizedJeroslawDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:03<00:00, 30.08it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 32.82; stdev step: 26.21; avg error: 1.22; stdev error: 0.79\n",
      "Table:  [16, 57, 16, 21, 17, 14, 56, 16, 10, 69, 14, 32, 17, 52, 17, 14, 8, 11, 9, 62, 32, 17, 82, 28, 28, 28, 25, 22, 8, 30, 147, 17, 6, 44, 12, 80, 28, 52, 62, 14, 37, 32, 41, 51, 25, 37, 40, 34, 68, 33, 34, 14, 17, 88, 62, 82, 10, 15, 11, 39, 58, 79, 59, 56, 11, 58, 12, 16, 13, 14, 10, 90, 41, 16, 45, 12, 8, 47, 10, 25, 11, 69, 63, 16, 7, 11, 6, 12, 10, 77, 29, 9, 14, 29, 101, 13, 37, 10, 10, 8]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "print_all(100, 500, 30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/100 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have generated 100 formulas\n",
      "FastHumbleDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [03:56<00:00,  2.16s/it]\n",
      "  1%|          | 1/100 [00:00<00:15,  6.28it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 59.85; stdev step: 105.73; avg error: 0.41; stdev error: 0.68\n",
      "Table:  [12, 17, 12, 16, 16, 34, 15, 14, 17, 21, 329, 139, 14, 18, 11, 14, 7, 16, 295, 15, 76, 265, 81, 17, 15, 15, 11, 18, 31, 13, 20, 12, 179, 14, 12, 18, 14, 17, 21, 18, 21, 16, 16, 31, 22, 13, 11, 12, 13, 12, 539, 19, 16, 19, 10, 16, 19, 439, 20, 14, 9, 10, 52, 587, 18, 16, 15, 60, 15, 33, 19, 25, 20, 11, 12, 137, 171, 18, 119, 11, 96, 30, 14, 14, 133, 27, 12, 13, 15, 241, 76, 190, 248, 168, 18, 13, 11, 13, 12, 106]\n",
      "NormalizedJeroslawDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:13<00:00,  3.94it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 84.10; stdev step: 73.23; avg error: 1.86; stdev error: 1.08\n",
      "Table:  [88, 182, 145, 12, 12, 76, 128, 100, 39, 63, 18, 108, 101, 16, 23, 20, 28, 39, 188, 82, 34, 84, 63, 54, 98, 18, 60, 12, 67, 12, 49, 284, 88, 66, 21, 65, 15, 156, 175, 20, 26, 109, 29, 31, 34, 119, 91, 16, 48, 10, 14, 25, 10, 25, 88, 290, 107, 301, 11, 13, 17, 15, 217, 234, 14, 48, 35, 132, 107, 93, 143, 156, 52, 60, 19, 218, 160, 18, 96, 49, 112, 18, 44, 15, 180, 48, 13, 127, 63, 266, 76, 138, 140, 187, 16, 96, 246, 228, 45, 163]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "print_all(100, 10000, 40, light=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  0%|          | 0/100 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have generated 100 formulas\n",
      "FastHumbleDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  1%|          | 1/100 [00:01<02:50,  1.72s/it]\u001b[A\n",
      "  2%|▏         | 2/100 [00:01<02:05,  1.28s/it]\u001b[A\n",
      "  3%|▎         | 3/100 [00:04<02:39,  1.64s/it]\u001b[A\n",
      "  4%|▍         | 4/100 [00:07<03:12,  2.01s/it]\u001b[A\n",
      "  5%|▌         | 5/100 [00:09<03:13,  2.04s/it]\u001b[A\n",
      "  6%|▌         | 6/100 [00:12<03:39,  2.34s/it]\u001b[A\n",
      "  7%|▋         | 7/100 [00:14<03:39,  2.36s/it]\u001b[A\n",
      "  8%|▊         | 8/100 [00:16<03:27,  2.25s/it]\u001b[A\n",
      "  9%|▉         | 9/100 [00:19<03:26,  2.27s/it]\u001b[A\n",
      " 10%|█         | 10/100 [00:20<03:01,  2.02s/it]\u001b[A\n",
      " 11%|█         | 11/100 [00:23<03:27,  2.33s/it]\u001b[A\n",
      " 12%|█▏        | 12/100 [00:26<03:25,  2.34s/it]\u001b[A\n",
      " 13%|█▎        | 13/100 [00:47<11:49,  8.15s/it]\u001b[A\n",
      " 14%|█▍        | 14/100 [00:49<08:48,  6.15s/it]\u001b[A\n",
      " 15%|█▌        | 15/100 [00:51<07:00,  4.95s/it]\u001b[A\n",
      " 16%|█▌        | 16/100 [00:53<05:41,  4.06s/it]\u001b[A\n",
      " 17%|█▋        | 17/100 [01:01<07:27,  5.39s/it]\u001b[A\n",
      " 18%|█▊        | 18/100 [01:04<06:12,  4.54s/it]\u001b[A\n",
      " 19%|█▉        | 19/100 [01:16<09:21,  6.93s/it]\u001b[A\n",
      " 20%|██        | 20/100 [01:23<09:15,  6.95s/it]\u001b[A\n",
      " 21%|██        | 21/100 [01:25<06:57,  5.28s/it]\u001b[A\n",
      " 22%|██▏       | 22/100 [01:28<05:53,  4.53s/it]\u001b[A\n",
      " 23%|██▎       | 23/100 [01:29<04:43,  3.69s/it]\u001b[A\n",
      " 24%|██▍       | 24/100 [01:32<04:06,  3.25s/it]\u001b[A\n",
      " 25%|██▌       | 25/100 [01:32<02:56,  2.35s/it]\u001b[A\n",
      " 26%|██▌       | 26/100 [01:35<03:16,  2.65s/it]\u001b[A\n",
      " 27%|██▋       | 27/100 [01:38<03:27,  2.85s/it]\u001b[A\n",
      " 28%|██▊       | 28/100 [01:40<03:01,  2.53s/it]\u001b[A\n",
      " 29%|██▉       | 29/100 [01:43<03:04,  2.60s/it]\u001b[A\n",
      " 30%|███       | 30/100 [01:45<02:50,  2.44s/it]\u001b[A\n",
      " 31%|███       | 31/100 [01:48<02:59,  2.60s/it]\u001b[A\n",
      " 32%|███▏      | 32/100 [01:50<02:51,  2.52s/it]\u001b[A\n",
      " 33%|███▎      | 33/100 [01:52<02:33,  2.29s/it]\u001b[A\n",
      " 34%|███▍      | 34/100 [01:54<02:24,  2.19s/it]\u001b[A\n",
      " 35%|███▌      | 35/100 [01:55<01:50,  1.69s/it]\u001b[A\n",
      " 36%|███▌      | 36/100 [02:17<08:35,  8.05s/it]\u001b[A\n",
      " 37%|███▋      | 37/100 [02:20<06:45,  6.44s/it]\u001b[A\n",
      " 38%|███▊      | 38/100 [02:26<06:20,  6.14s/it]\u001b[A\n",
      " 39%|███▉      | 39/100 [02:27<04:49,  4.74s/it]\u001b[A\n",
      " 40%|████      | 40/100 [02:30<04:20,  4.34s/it]\u001b[A\n",
      " 41%|████      | 41/100 [02:33<03:43,  3.79s/it]\u001b[A\n",
      " 42%|████▏     | 42/100 [02:33<02:42,  2.80s/it]\u001b[A\n",
      " 43%|████▎     | 43/100 [02:35<02:24,  2.54s/it]\u001b[A\n",
      " 44%|████▍     | 44/100 [02:40<02:49,  3.03s/it]\u001b[A\n",
      " 45%|████▌     | 45/100 [02:42<02:33,  2.80s/it]\u001b[A\n",
      " 46%|████▌     | 46/100 [02:44<02:16,  2.53s/it]\u001b[A\n",
      " 47%|████▋     | 47/100 [02:46<02:07,  2.41s/it]\u001b[A\n",
      " 48%|████▊     | 48/100 [02:50<02:39,  3.06s/it]\u001b[A\n",
      " 49%|████▉     | 49/100 [03:00<04:10,  4.92s/it]\u001b[A\n",
      " 50%|█████     | 50/100 [03:02<03:21,  4.02s/it]\u001b[A\n",
      " 51%|█████     | 51/100 [03:05<03:00,  3.67s/it]\u001b[A\n",
      " 52%|█████▏    | 52/100 [03:06<02:18,  2.88s/it]\u001b[A\n",
      " 53%|█████▎    | 53/100 [03:07<01:48,  2.32s/it]\u001b[A\n",
      " 54%|█████▍    | 54/100 [03:09<01:44,  2.27s/it]\u001b[A\n",
      " 55%|█████▌    | 55/100 [03:10<01:31,  2.04s/it]\u001b[A\n",
      " 56%|█████▌    | 56/100 [03:21<03:22,  4.61s/it]\u001b[A\n",
      " 57%|█████▋    | 57/100 [03:24<02:58,  4.15s/it]\u001b[A\n",
      " 58%|█████▊    | 58/100 [03:41<05:38,  8.06s/it]\u001b[A\n",
      " 59%|█████▉    | 59/100 [03:43<04:19,  6.34s/it]\u001b[A\n",
      " 60%|██████    | 60/100 [03:45<03:22,  5.07s/it]\u001b[A\n",
      " 61%|██████    | 61/100 [03:48<02:46,  4.26s/it]\u001b[A\n",
      " 62%|██████▏   | 62/100 [03:54<03:07,  4.92s/it]\u001b[A\n",
      " 63%|██████▎   | 63/100 [03:56<02:28,  4.01s/it]\u001b[A\n",
      " 64%|██████▍   | 64/100 [03:58<02:02,  3.41s/it]\u001b[A\n",
      " 65%|██████▌   | 65/100 [04:00<01:42,  2.94s/it]\u001b[A\n",
      " 66%|██████▌   | 66/100 [04:02<01:26,  2.53s/it]\u001b[A\n",
      " 67%|██████▋   | 67/100 [04:18<03:42,  6.75s/it]\u001b[A\n",
      " 68%|██████▊   | 68/100 [04:20<02:46,  5.21s/it]\u001b[A\n",
      " 69%|██████▉   | 69/100 [04:33<03:59,  7.74s/it]\u001b[A\n",
      " 70%|███████   | 70/100 [04:36<03:03,  6.13s/it]\u001b[A\n",
      " 71%|███████   | 71/100 [04:52<04:24,  9.12s/it]\u001b[A\n",
      " 72%|███████▏  | 72/100 [04:54<03:18,  7.10s/it]\u001b[A\n",
      " 73%|███████▎  | 73/100 [04:57<02:32,  5.64s/it]\u001b[A\n",
      " 74%|███████▍  | 74/100 [04:58<01:57,  4.51s/it]\u001b[A\n",
      " 75%|███████▌  | 75/100 [05:01<01:35,  3.84s/it]\u001b[A\n",
      " 76%|███████▌  | 76/100 [05:03<01:18,  3.26s/it]\u001b[A\n",
      " 77%|███████▋  | 77/100 [05:09<01:34,  4.10s/it]\u001b[A\n",
      " 78%|███████▊  | 78/100 [05:24<02:43,  7.43s/it]\u001b[A\n",
      " 79%|███████▉  | 79/100 [05:25<01:55,  5.52s/it]\u001b[A\n",
      " 80%|████████  | 80/100 [05:27<01:27,  4.36s/it]\u001b[A\n",
      " 81%|████████  | 81/100 [05:48<02:58,  9.41s/it]\u001b[A\n",
      " 82%|████████▏ | 82/100 [06:01<03:07, 10.44s/it]\u001b[A\n",
      " 83%|████████▎ | 83/100 [06:02<02:13,  7.86s/it]\u001b[A\n",
      " 84%|████████▍ | 84/100 [06:05<01:40,  6.30s/it]\u001b[A\n",
      " 85%|████████▌ | 85/100 [06:06<01:10,  4.70s/it]\u001b[A\n",
      " 86%|████████▌ | 86/100 [06:09<00:57,  4.12s/it]\u001b[A\n",
      " 87%|████████▋ | 87/100 [06:11<00:45,  3.48s/it]\u001b[A\n",
      " 88%|████████▊ | 88/100 [06:12<00:32,  2.74s/it]\u001b[A\n",
      " 89%|████████▉ | 89/100 [06:15<00:30,  2.79s/it]\u001b[A\n",
      " 90%|█████████ | 90/100 [06:17<00:24,  2.47s/it]\u001b[A\n",
      " 91%|█████████ | 91/100 [06:19<00:22,  2.51s/it]\u001b[A\n",
      " 92%|█████████▏| 92/100 [06:21<00:19,  2.40s/it]\u001b[A\n",
      " 93%|█████████▎| 93/100 [06:36<00:43,  6.24s/it]\u001b[A\n",
      " 94%|█████████▍| 94/100 [06:39<00:31,  5.18s/it]\u001b[A\n",
      " 95%|█████████▌| 95/100 [06:42<00:21,  4.39s/it]\u001b[A\n",
      " 96%|█████████▌| 96/100 [06:48<00:19,  4.83s/it]\u001b[A\n",
      " 97%|█████████▋| 97/100 [06:54<00:16,  5.39s/it]\u001b[A\n",
      " 98%|█████████▊| 98/100 [07:00<00:10,  5.50s/it]\u001b[A\n",
      " 99%|█████████▉| 99/100 [07:01<00:04,  4.00s/it]\u001b[A\n",
      "100%|██████████| 100/100 [07:05<00:00,  4.14s/it]\u001b[A\n",
      "  0%|          | 0/100 [00:00<?, ?it/s]\u001b[A\n",
      "  2%|▏         | 2/100 [00:00<00:06, 15.45it/s]\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 113.67; stdev step: 188.37; avg error: 0.54; stdev error: 0.82\n",
      "Table:  [15, 18, 23, 28, 19, 17, 24, 20, 22, 13, 19, 21, 816, 122, 19, 18, 284, 23, 401, 350, 35, 25, 15, 21, 35, 23, 41, 22, 32, 19, 16, 18, 15, 14, 27, 666, 26, 108, 15, 60, 22, 53, 18, 54, 20, 17, 18, 70, 367, 17, 16, 32, 19, 21, 11, 617, 28, 701, 20, 19, 19, 83, 12, 16, 16, 13, 560, 13, 414, 20, 384, 20, 20, 16, 21, 17, 253, 618, 133, 13, 524, 519, 7, 24, 207, 25, 17, 8, 18, 15, 24, 18, 540, 25, 13, 293, 326, 120, 20, 318]\n",
      "NormalizedJeroslawDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  3%|▎         | 3/100 [00:00<00:16,  5.89it/s]\u001b[A\n",
      "  4%|▍         | 4/100 [00:00<00:15,  6.19it/s]\u001b[A\n",
      "  5%|▌         | 5/100 [00:00<00:17,  5.49it/s]\u001b[A\n",
      "  6%|▌         | 6/100 [00:01<00:41,  2.25it/s]\u001b[A\n",
      "  7%|▋         | 7/100 [00:02<00:40,  2.31it/s]\u001b[A\n",
      "  9%|▉         | 9/100 [00:03<00:36,  2.50it/s]\u001b[A\n",
      " 12%|█▏        | 12/100 [00:03<00:27,  3.21it/s]\u001b[A\n",
      " 13%|█▎        | 13/100 [00:04<00:46,  1.86it/s]\u001b[A\n",
      " 14%|█▍        | 14/100 [00:05<00:49,  1.73it/s]\u001b[A\n",
      " 15%|█▌        | 15/100 [00:06<01:15,  1.13it/s]\u001b[A\n",
      " 16%|█▌        | 16/100 [00:07<01:03,  1.32it/s]\u001b[A\n",
      " 17%|█▋        | 17/100 [00:07<00:53,  1.55it/s]\u001b[A\n",
      " 18%|█▊        | 18/100 [00:08<01:00,  1.35it/s]\u001b[A\n",
      " 20%|██        | 20/100 [00:09<00:47,  1.67it/s]\u001b[A\n",
      " 21%|██        | 21/100 [00:09<00:37,  2.09it/s]\u001b[A\n",
      " 22%|██▏       | 22/100 [00:09<00:28,  2.73it/s]\u001b[A\n",
      " 25%|██▌       | 25/100 [00:09<00:20,  3.66it/s]\u001b[A\n",
      " 27%|██▋       | 27/100 [00:09<00:18,  3.93it/s]\u001b[A\n",
      " 28%|██▊       | 28/100 [00:10<00:16,  4.33it/s]\u001b[A\n",
      " 29%|██▉       | 29/100 [00:11<00:37,  1.88it/s]\u001b[A\n",
      " 30%|███       | 30/100 [00:11<00:28,  2.45it/s]\u001b[A\n",
      " 31%|███       | 31/100 [00:11<00:27,  2.54it/s]\u001b[A\n",
      " 32%|███▏      | 32/100 [00:11<00:21,  3.18it/s]\u001b[A\n",
      " 34%|███▍      | 34/100 [00:12<00:17,  3.81it/s]\u001b[A\n",
      " 36%|███▌      | 36/100 [00:13<00:24,  2.62it/s]\u001b[A\n",
      " 37%|███▋      | 37/100 [00:14<00:27,  2.26it/s]\u001b[A\n",
      " 38%|███▊      | 38/100 [00:14<00:22,  2.78it/s]\u001b[A\n",
      " 39%|███▉      | 39/100 [00:14<00:19,  3.16it/s]\u001b[A\n",
      " 41%|████      | 41/100 [00:14<00:17,  3.43it/s]\u001b[A\n",
      " 42%|████▏     | 42/100 [00:15<00:23,  2.51it/s]\u001b[A\n",
      " 43%|████▎     | 43/100 [00:16<00:23,  2.46it/s]\u001b[A\n",
      " 44%|████▍     | 44/100 [00:16<00:22,  2.46it/s]\u001b[A\n",
      " 46%|████▌     | 46/100 [00:17<00:25,  2.15it/s]\u001b[A\n",
      " 47%|████▋     | 47/100 [00:17<00:22,  2.33it/s]\u001b[A\n",
      " 48%|████▊     | 48/100 [00:18<00:29,  1.76it/s]\u001b[A\n",
      " 49%|████▉     | 49/100 [00:20<00:44,  1.15it/s]\u001b[A\n",
      " 50%|█████     | 50/100 [00:21<00:39,  1.27it/s]\u001b[A\n",
      " 52%|█████▏    | 52/100 [00:21<00:27,  1.76it/s]\u001b[A\n",
      " 54%|█████▍    | 54/100 [00:21<00:20,  2.23it/s]\u001b[A\n",
      " 55%|█████▌    | 55/100 [00:21<00:16,  2.73it/s]\u001b[A\n",
      " 56%|█████▌    | 56/100 [00:21<00:14,  3.09it/s]\u001b[A\n",
      " 57%|█████▋    | 57/100 [00:22<00:12,  3.57it/s]\u001b[A\n",
      " 58%|█████▊    | 58/100 [00:22<00:09,  4.42it/s]\u001b[A\n",
      " 61%|██████    | 61/100 [00:22<00:08,  4.65it/s]\u001b[A\n",
      " 63%|██████▎   | 63/100 [00:22<00:06,  5.35it/s]\u001b[A\n",
      " 64%|██████▍   | 64/100 [00:23<00:07,  5.12it/s]\u001b[A\n",
      " 65%|██████▌   | 65/100 [00:23<00:08,  4.24it/s]\u001b[A\n",
      " 67%|██████▋   | 67/100 [00:23<00:06,  5.44it/s]\u001b[A\n",
      " 69%|██████▉   | 69/100 [00:24<00:06,  4.83it/s]\u001b[A\n",
      " 71%|███████   | 71/100 [00:24<00:04,  6.17it/s]\u001b[A\n",
      " 73%|███████▎  | 73/100 [00:24<00:03,  7.42it/s]\u001b[A\n",
      " 75%|███████▌  | 75/100 [00:25<00:06,  4.06it/s]\u001b[A\n",
      " 76%|███████▌  | 76/100 [00:25<00:05,  4.36it/s]\u001b[A\n",
      " 77%|███████▋  | 77/100 [00:26<00:08,  2.81it/s]\u001b[A\n",
      " 78%|███████▊  | 78/100 [00:27<00:10,  2.07it/s]\u001b[A\n",
      " 79%|███████▉  | 79/100 [00:28<00:14,  1.45it/s]\u001b[A\n",
      " 81%|████████  | 81/100 [00:28<00:11,  1.72it/s]\u001b[A\n",
      " 82%|████████▏ | 82/100 [00:29<00:10,  1.66it/s]\u001b[A\n",
      " 83%|████████▎ | 83/100 [00:29<00:07,  2.18it/s]\u001b[A\n",
      " 84%|████████▍ | 84/100 [00:30<00:07,  2.12it/s]\u001b[A\n",
      " 85%|████████▌ | 85/100 [00:30<00:08,  1.77it/s]\u001b[A\n",
      " 86%|████████▌ | 86/100 [00:31<00:05,  2.34it/s]\u001b[A\n",
      " 87%|████████▋ | 87/100 [00:31<00:05,  2.43it/s]\u001b[A\n",
      " 88%|████████▊ | 88/100 [00:32<00:05,  2.10it/s]\u001b[A\n",
      " 89%|████████▉ | 89/100 [00:32<00:06,  1.72it/s]\u001b[A\n",
      " 91%|█████████ | 91/100 [00:33<00:04,  2.22it/s]\u001b[A\n",
      " 92%|█████████▏| 92/100 [00:33<00:03,  2.34it/s]\u001b[A\n",
      " 93%|█████████▎| 93/100 [00:34<00:03,  1.91it/s]\u001b[A\n",
      " 94%|█████████▍| 94/100 [00:35<00:03,  1.66it/s]\u001b[A\n",
      " 95%|█████████▌| 95/100 [00:35<00:02,  2.17it/s]\u001b[A\n",
      " 96%|█████████▌| 96/100 [00:35<00:01,  2.29it/s]\u001b[A\n",
      " 97%|█████████▋| 97/100 [00:36<00:01,  1.77it/s]\u001b[A\n",
      " 99%|█████████▉| 99/100 [00:36<00:00,  2.24it/s]\u001b[A\n",
      "100%|██████████| 100/100 [00:37<00:00,  2.30it/s]\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 152.00; stdev step: 146.38; avg error: 2.03; stdev error: 1.10\n",
      "Table:  [34, 18, 208, 84, 125, 322, 143, 14, 241, 17, 23, 127, 487, 244, 591, 216, 125, 505, 20, 174, 75, 42, 36, 13, 35, 58, 160, 75, 499, 67, 117, 36, 12, 77, 27, 621, 256, 70, 86, 19, 235, 175, 171, 154, 35, 422, 132, 317, 667, 206, 16, 40, 11, 114, 54, 88, 106, 50, 18, 14, 203, 33, 58, 72, 168, 12, 52, 18, 224, 46, 20, 59, 19, 153, 246, 105, 187, 296, 396, 14, 338, 269, 44, 230, 278, 55, 143, 260, 326, 18, 119, 141, 321, 327, 67, 153, 332, 26, 92, 156]\n"
     ]
    }
   ],
   "source": [
    "print_all(100, 10000, 50, light=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  0%|          | 0/100 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have generated 100 formulas\n",
      "FastHumbleDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  1%|          | 1/100 [00:04<07:16,  4.41s/it]\u001b[A\n",
      "  2%|▏         | 2/100 [00:57<31:06, 19.04s/it]\u001b[A\n",
      "  3%|▎         | 3/100 [01:01<23:31, 14.56s/it]\u001b[A\n",
      "  4%|▍         | 4/100 [01:05<18:20, 11.47s/it]\u001b[A\n",
      "  5%|▌         | 5/100 [01:12<15:54, 10.05s/it]\u001b[A\n",
      "  6%|▌         | 6/100 [01:17<13:13,  8.44s/it]\u001b[A\n",
      "  7%|▋         | 7/100 [01:22<11:22,  7.34s/it]\u001b[A\n",
      "  8%|▊         | 8/100 [01:26<10:02,  6.55s/it]\u001b[A\n",
      "  9%|▉         | 9/100 [02:14<28:29, 18.78s/it]\u001b[A\n",
      " 10%|█         | 10/100 [03:11<45:21, 30.24s/it]\u001b[A\n",
      " 11%|█         | 11/100 [03:15<33:31, 22.60s/it]\u001b[A\n",
      " 12%|█▏        | 12/100 [07:01<2:02:25, 83.47s/it]\u001b[A\n",
      " 13%|█▎        | 13/100 [07:04<1:26:12, 59.45s/it]\u001b[A\n",
      " 14%|█▍        | 14/100 [07:10<1:02:13, 43.41s/it]\u001b[A\n",
      " 15%|█▌        | 15/100 [07:50<59:57, 42.32s/it]  \u001b[A\n",
      " 16%|█▌        | 16/100 [07:55<43:33, 31.11s/it]\u001b[A\n",
      " 17%|█▋        | 17/100 [08:03<33:32, 24.25s/it]\u001b[A\n",
      " 18%|█▊        | 18/100 [08:05<23:57, 17.53s/it]\u001b[A\n",
      " 19%|█▉        | 19/100 [09:51<59:30, 44.08s/it]\u001b[A\n",
      " 20%|██        | 20/100 [11:58<1:31:45, 68.82s/it]\u001b[A\n",
      " 21%|██        | 21/100 [12:01<1:04:54, 49.30s/it]\u001b[A\n",
      " 22%|██▏       | 22/100 [12:03<45:26, 34.96s/it]  \u001b[A\n",
      " 23%|██▎       | 23/100 [12:18<37:22, 29.12s/it]\u001b[A\n",
      " 24%|██▍       | 24/100 [12:20<26:31, 20.94s/it]\u001b[A\n",
      " 25%|██▌       | 25/100 [12:34<23:35, 18.88s/it]\u001b[A\n",
      " 26%|██▌       | 26/100 [12:42<19:06, 15.49s/it]\u001b[A\n",
      " 27%|██▋       | 27/100 [12:43<13:37, 11.20s/it]\u001b[A\n",
      " 28%|██▊       | 28/100 [12:47<10:38,  8.87s/it]\u001b[A\n",
      " 29%|██▉       | 29/100 [13:51<30:03, 25.40s/it]\u001b[A\n",
      " 30%|███       | 30/100 [13:52<21:22, 18.32s/it]\u001b[A\n",
      " 31%|███       | 31/100 [19:52<2:18:51, 120.75s/it]\u001b[A\n",
      " 32%|███▏      | 32/100 [19:57<1:37:30, 86.04s/it] \u001b[A\n",
      " 33%|███▎      | 33/100 [19:59<1:07:56, 60.85s/it]\u001b[A\n",
      " 34%|███▍      | 34/100 [20:03<48:08, 43.76s/it]  \u001b[A\n",
      " 35%|███▌      | 35/100 [20:06<34:08, 31.52s/it]\u001b[A\n",
      " 36%|███▌      | 36/100 [20:11<24:58, 23.42s/it]\u001b[A\n",
      " 37%|███▋      | 37/100 [20:15<18:36, 17.72s/it]\u001b[A\n",
      " 38%|███▊      | 38/100 [20:19<14:05, 13.63s/it]\u001b[A\n",
      " 39%|███▉      | 39/100 [20:22<10:31, 10.35s/it]\u001b[A\n",
      " 40%|████      | 40/100 [20:24<08:02,  8.03s/it]\u001b[A\n",
      " 41%|████      | 41/100 [25:35<1:37:00, 98.66s/it]\u001b[A\n",
      " 42%|████▏     | 42/100 [26:10<1:16:59, 79.65s/it]\u001b[A\n",
      " 43%|████▎     | 43/100 [27:36<1:17:27, 81.54s/it]\u001b[A\n",
      " 44%|████▍     | 44/100 [27:44<55:38, 59.62s/it]  \u001b[A\n",
      " 45%|████▌     | 45/100 [27:49<39:39, 43.26s/it]\u001b[A\n",
      " 46%|████▌     | 46/100 [27:54<28:27, 31.62s/it]\u001b[A\n",
      " 47%|████▋     | 47/100 [27:56<20:15, 22.93s/it]\u001b[A\n",
      " 48%|████▊     | 48/100 [27:59<14:32, 16.78s/it]\u001b[A\n",
      " 49%|████▉     | 49/100 [28:03<11:08, 13.11s/it]\u001b[A\n",
      " 50%|█████     | 50/100 [28:11<09:28, 11.38s/it]\u001b[A\n",
      " 51%|█████     | 51/100 [28:15<07:30,  9.19s/it]\u001b[A\n",
      " 52%|█████▏    | 52/100 [28:37<10:25, 13.03s/it]\u001b[A\n",
      " 53%|█████▎    | 53/100 [28:43<08:28, 10.82s/it]\u001b[A\n",
      " 54%|█████▍    | 54/100 [31:10<39:39, 51.72s/it]\u001b[A\n",
      " 55%|█████▌    | 55/100 [31:18<29:02, 38.73s/it]\u001b[A\n",
      " 56%|█████▌    | 56/100 [31:23<20:57, 28.59s/it]\u001b[A\n",
      " 57%|█████▋    | 57/100 [31:52<20:34, 28.70s/it]\u001b[A\n",
      " 58%|█████▊    | 58/100 [31:56<14:48, 21.16s/it]\u001b[A\n",
      " 59%|█████▉    | 59/100 [32:55<22:17, 32.61s/it]\u001b[A\n",
      " 60%|██████    | 60/100 [33:01<16:22, 24.57s/it]\u001b[A\n",
      " 61%|██████    | 61/100 [33:43<19:23, 29.83s/it]\u001b[A\n",
      " 62%|██████▏   | 62/100 [34:13<19:02, 30.08s/it]\u001b[A\n",
      " 63%|██████▎   | 63/100 [34:18<13:51, 22.47s/it]\u001b[A\n",
      " 64%|██████▍   | 64/100 [34:21<10:01, 16.71s/it]\u001b[A\n",
      " 65%|██████▌   | 65/100 [34:26<07:32, 12.94s/it]\u001b[A\n",
      " 66%|██████▌   | 66/100 [34:30<05:50, 10.30s/it]\u001b[A\n",
      " 67%|██████▋   | 67/100 [34:32<04:20,  7.91s/it]\u001b[A\n",
      " 68%|██████▊   | 68/100 [36:07<18:05, 33.91s/it]\u001b[A\n",
      " 69%|██████▉   | 69/100 [36:11<12:53, 24.96s/it]\u001b[A\n",
      " 70%|███████   | 70/100 [36:16<09:33, 19.12s/it]\u001b[A\n",
      " 71%|███████   | 71/100 [36:21<07:13, 14.97s/it]\u001b[A\n",
      " 72%|███████▏  | 72/100 [36:23<05:02, 10.79s/it]\u001b[A\n",
      " 73%|███████▎  | 73/100 [36:26<03:48,  8.48s/it]\u001b[A\n",
      " 74%|███████▍  | 74/100 [36:30<03:07,  7.21s/it]\u001b[A\n",
      " 75%|███████▌  | 75/100 [36:41<03:30,  8.44s/it]\u001b[A\n",
      " 76%|███████▌  | 76/100 [39:20<21:28, 53.69s/it]\u001b[A\n",
      " 77%|███████▋  | 77/100 [39:25<14:56, 38.98s/it]\u001b[A\n",
      " 78%|███████▊  | 78/100 [39:26<10:09, 27.68s/it]\u001b[A\n",
      " 79%|███████▉  | 79/100 [39:29<07:06, 20.30s/it]\u001b[A\n",
      " 80%|████████  | 80/100 [39:31<04:53, 14.66s/it]\u001b[A\n",
      " 81%|████████  | 81/100 [39:37<03:47, 11.96s/it]\u001b[A\n",
      " 82%|████████▏ | 82/100 [39:52<03:55, 13.10s/it]\u001b[A\n",
      " 83%|████████▎ | 83/100 [39:57<02:59, 10.58s/it]\u001b[A\n",
      " 84%|████████▍ | 84/100 [40:02<02:22,  8.90s/it]\u001b[A\n",
      " 85%|████████▌ | 85/100 [40:06<01:52,  7.47s/it]\u001b[A\n",
      " 86%|████████▌ | 86/100 [40:11<01:34,  6.73s/it]\u001b[A\n",
      " 87%|████████▋ | 87/100 [41:07<04:39, 21.52s/it]\u001b[A\n",
      " 88%|████████▊ | 88/100 [43:56<13:08, 65.70s/it]\u001b[A\n",
      " 89%|████████▉ | 89/100 [44:20<09:45, 53.23s/it]\u001b[A\n",
      " 90%|█████████ | 90/100 [45:01<08:14, 49.50s/it]\u001b[A\n",
      " 91%|█████████ | 91/100 [45:19<06:01, 40.20s/it]\u001b[A\n",
      " 92%|█████████▏| 92/100 [45:22<03:51, 28.94s/it]\u001b[A\n",
      " 93%|█████████▎| 93/100 [45:26<02:30, 21.52s/it]\u001b[A\n",
      " 94%|█████████▍| 94/100 [45:44<02:01, 20.29s/it]\u001b[A\n",
      " 95%|█████████▌| 95/100 [46:19<02:04, 24.87s/it]\u001b[A\n",
      " 96%|█████████▌| 96/100 [46:23<01:14, 18.59s/it]\u001b[A\n",
      " 97%|█████████▋| 97/100 [46:26<00:41, 13.95s/it]\u001b[A\n",
      " 98%|█████████▊| 98/100 [46:31<00:22, 11.09s/it]\u001b[A\n",
      " 99%|█████████▉| 99/100 [48:27<00:42, 42.68s/it]\u001b[A\n",
      "100%|██████████| 100/100 [48:32<00:00, 31.24s/it]\u001b[A\n",
      "  0%|          | 0/100 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 1050.70; stdev step: 1994.60; avg error: 1.09; stdev error: 1.20\n",
      "Table:  [658, 2139, 19, 26, 59, 23, 31, 25, 1722, 2621, 24, 5192, 21, 34, 2718, 23, 307, 229, 4790, 4254, 22, 173, 208, 386, 1016, 456, 175, 23, 3568, 99, 12695, 30, 25, 19, 16, 25, 33, 194, 87, 207, 9009, 2692, 3361, 257, 28, 894, 16, 62, 23, 89, 27, 400, 32, 4225, 438, 1055, 1082, 22, 2447, 226, 1074, 643, 25, 19, 21, 28, 204, 3040, 29, 31, 30, 108, 19, 23, 164, 4595, 24, 246, 18, 170, 32, 511, 34, 32, 26, 28, 4465, 5290, 2582, 1538, 1240, 364, 22, 1812, 907, 27, 365, 30, 4475, 22]\n",
      "NormalizedJeroslawDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  1%|          | 1/100 [00:05<09:10,  5.56s/it]\u001b[A\n",
      "  2%|▏         | 2/100 [00:08<07:43,  4.73s/it]\u001b[A\n",
      "  3%|▎         | 3/100 [00:09<05:43,  3.54s/it]\u001b[A\n",
      "  4%|▍         | 4/100 [00:10<04:47,  3.00s/it]\u001b[A\n",
      "  6%|▌         | 6/100 [00:13<03:49,  2.44s/it]\u001b[A\n",
      "  7%|▋         | 7/100 [00:13<02:42,  1.75s/it]\u001b[A\n",
      "  8%|▊         | 8/100 [00:13<01:59,  1.30s/it]\u001b[A\n",
      "  9%|▉         | 9/100 [00:17<03:09,  2.08s/it]\u001b[A\n",
      " 10%|█         | 10/100 [00:28<07:22,  4.91s/it]\u001b[A\n",
      " 11%|█         | 11/100 [00:29<05:13,  3.53s/it]\u001b[A\n",
      " 12%|█▏        | 12/100 [00:31<04:47,  3.27s/it]\u001b[A\n",
      " 13%|█▎        | 13/100 [00:40<06:57,  4.80s/it]\u001b[A\n",
      " 14%|█▍        | 14/100 [00:47<07:56,  5.54s/it]\u001b[A\n",
      " 15%|█▌        | 15/100 [00:55<08:49,  6.23s/it]\u001b[A\n",
      " 16%|█▌        | 16/100 [00:55<06:08,  4.39s/it]\u001b[A\n",
      " 17%|█▋        | 17/100 [00:59<06:04,  4.39s/it]\u001b[A\n",
      " 18%|█▊        | 18/100 [01:01<04:40,  3.42s/it]\u001b[A\n",
      " 19%|█▉        | 19/100 [01:06<05:36,  4.15s/it]\u001b[A\n",
      " 20%|██        | 20/100 [01:07<04:12,  3.16s/it]\u001b[A\n",
      " 21%|██        | 21/100 [01:09<03:30,  2.66s/it]\u001b[A\n",
      " 22%|██▏       | 22/100 [01:10<02:55,  2.25s/it]\u001b[A\n",
      " 23%|██▎       | 23/100 [01:12<02:49,  2.20s/it]\u001b[A\n",
      " 24%|██▍       | 24/100 [01:14<02:34,  2.03s/it]\u001b[A\n",
      " 25%|██▌       | 25/100 [01:14<02:00,  1.61s/it]\u001b[A\n",
      " 26%|██▌       | 26/100 [01:15<01:39,  1.34s/it]\u001b[A\n",
      " 27%|██▋       | 27/100 [01:16<01:22,  1.13s/it]\u001b[A\n",
      " 28%|██▊       | 28/100 [01:16<01:02,  1.14it/s]\u001b[A\n",
      " 29%|██▉       | 29/100 [01:16<00:49,  1.44it/s]\u001b[A\n",
      " 30%|███       | 30/100 [01:18<01:07,  1.04it/s]\u001b[A\n",
      " 31%|███       | 31/100 [01:36<07:06,  6.18s/it]\u001b[A\n",
      " 32%|███▏      | 32/100 [01:37<05:03,  4.47s/it]\u001b[A\n",
      " 33%|███▎      | 33/100 [01:40<04:35,  4.11s/it]\u001b[A\n",
      " 34%|███▍      | 34/100 [01:47<05:33,  5.06s/it]\u001b[A\n",
      " 35%|███▌      | 35/100 [01:56<06:48,  6.28s/it]\u001b[A\n",
      " 36%|███▌      | 36/100 [02:00<05:43,  5.37s/it]\u001b[A\n",
      " 37%|███▋      | 37/100 [02:04<05:23,  5.13s/it]\u001b[A\n",
      " 38%|███▊      | 38/100 [02:20<08:36,  8.32s/it]\u001b[A\n",
      " 39%|███▉      | 39/100 [02:22<06:26,  6.34s/it]\u001b[A\n",
      " 40%|████      | 40/100 [02:28<06:16,  6.27s/it]\u001b[A\n",
      " 41%|████      | 41/100 [02:36<06:37,  6.74s/it]\u001b[A\n",
      " 42%|████▏     | 42/100 [02:50<08:35,  8.88s/it]\u001b[A\n",
      " 43%|████▎     | 43/100 [02:57<08:01,  8.45s/it]\u001b[A\n",
      " 44%|████▍     | 44/100 [02:58<05:42,  6.12s/it]\u001b[A\n",
      " 45%|████▌     | 45/100 [03:00<04:37,  5.05s/it]\u001b[A\n",
      " 46%|████▌     | 46/100 [03:04<04:19,  4.81s/it]\u001b[A\n",
      " 48%|████▊     | 48/100 [03:07<03:11,  3.68s/it]\u001b[A\n",
      " 49%|████▉     | 49/100 [03:10<03:06,  3.65s/it]\u001b[A\n",
      " 50%|█████     | 50/100 [03:15<03:25,  4.10s/it]\u001b[A\n",
      " 52%|█████▏    | 52/100 [03:22<03:09,  3.96s/it]\u001b[A\n",
      " 53%|█████▎    | 53/100 [03:24<02:36,  3.33s/it]\u001b[A\n",
      " 54%|█████▍    | 54/100 [03:33<03:44,  4.88s/it]\u001b[A\n",
      " 55%|█████▌    | 55/100 [03:33<02:40,  3.57s/it]\u001b[A\n",
      " 56%|█████▌    | 56/100 [03:44<04:09,  5.68s/it]\u001b[A\n",
      " 57%|█████▋    | 57/100 [03:50<04:10,  5.84s/it]\u001b[A\n",
      " 58%|█████▊    | 58/100 [03:52<03:13,  4.60s/it]\u001b[A\n",
      " 59%|█████▉    | 59/100 [03:56<03:04,  4.49s/it]\u001b[A\n",
      " 60%|██████    | 60/100 [03:59<02:44,  4.11s/it]\u001b[A\n",
      " 61%|██████    | 61/100 [04:00<01:54,  2.95s/it]\u001b[A\n",
      " 62%|██████▏   | 62/100 [04:06<02:29,  3.94s/it]\u001b[A\n",
      " 63%|██████▎   | 63/100 [04:08<02:10,  3.53s/it]\u001b[A\n",
      " 64%|██████▍   | 64/100 [04:09<01:39,  2.76s/it]\u001b[A\n",
      " 66%|██████▌   | 66/100 [04:11<01:12,  2.15s/it]\u001b[A\n",
      " 67%|██████▋   | 67/100 [04:12<01:06,  2.01s/it]\u001b[A\n",
      " 68%|██████▊   | 68/100 [04:19<01:45,  3.29s/it]\u001b[A\n",
      " 69%|██████▉   | 69/100 [04:20<01:18,  2.54s/it]\u001b[A\n",
      " 70%|███████   | 70/100 [04:20<00:54,  1.83s/it]\u001b[A\n",
      " 71%|███████   | 71/100 [04:33<02:33,  5.30s/it]\u001b[A\n",
      " 72%|███████▏  | 72/100 [04:33<01:46,  3.81s/it]\u001b[A\n",
      " 73%|███████▎  | 73/100 [04:34<01:15,  2.81s/it]\u001b[A\n",
      " 74%|███████▍  | 74/100 [04:41<01:45,  4.07s/it]\u001b[A\n",
      " 75%|███████▌  | 75/100 [04:42<01:20,  3.23s/it]\u001b[A\n",
      " 76%|███████▌  | 76/100 [04:45<01:11,  3.00s/it]\u001b[A\n",
      " 77%|███████▋  | 77/100 [04:48<01:07,  2.95s/it]\u001b[A\n",
      " 78%|███████▊  | 78/100 [04:49<00:52,  2.40s/it]\u001b[A\n",
      " 80%|████████  | 80/100 [04:50<00:36,  1.84s/it]\u001b[A\n",
      " 81%|████████  | 81/100 [04:50<00:26,  1.39s/it]\u001b[A\n",
      " 82%|████████▏ | 82/100 [04:54<00:41,  2.28s/it]\u001b[A\n",
      " 83%|████████▎ | 83/100 [04:57<00:37,  2.22s/it]\u001b[A\n",
      " 84%|████████▍ | 84/100 [04:58<00:32,  2.02s/it]\u001b[A\n",
      " 85%|████████▌ | 85/100 [04:59<00:26,  1.78s/it]\u001b[A\n",
      " 86%|████████▌ | 86/100 [05:04<00:36,  2.62s/it]\u001b[A\n",
      " 87%|████████▋ | 87/100 [05:09<00:43,  3.35s/it]\u001b[A\n",
      " 88%|████████▊ | 88/100 [05:11<00:35,  2.95s/it]\u001b[A\n",
      " 89%|████████▉ | 89/100 [05:14<00:33,  3.01s/it]\u001b[A\n",
      " 90%|█████████ | 90/100 [05:15<00:22,  2.30s/it]\u001b[A\n",
      " 91%|█████████ | 91/100 [05:23<00:36,  4.03s/it]\u001b[A\n",
      " 92%|█████████▏| 92/100 [05:27<00:31,  4.00s/it]\u001b[A\n",
      " 93%|█████████▎| 93/100 [05:29<00:23,  3.42s/it]\u001b[A\n",
      " 94%|█████████▍| 94/100 [05:30<00:15,  2.63s/it]\u001b[A\n",
      " 95%|█████████▌| 95/100 [05:32<00:12,  2.56s/it]\u001b[A\n",
      " 96%|█████████▌| 96/100 [05:33<00:08,  2.09s/it]\u001b[A\n",
      " 97%|█████████▋| 97/100 [05:37<00:08,  2.69s/it]\u001b[A\n",
      " 98%|█████████▊| 98/100 [05:39<00:05,  2.53s/it]\u001b[A\n",
      " 99%|█████████▉| 99/100 [05:47<00:04,  4.23s/it]\u001b[A\n",
      "100%|██████████| 100/100 [05:48<00:00,  3.11s/it]\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Within 1000000 steps solved 100 problems out of 100\n",
      "#Sats: 100; avg step: 798.64; stdev step: 845.37; avg error: 2.99; stdev error: 1.20\n",
      "Table:  [905, 684, 161, 403, 35, 394, 55, 82, 934, 3204, 125, 786, 1502, 1842, 1759, 48, 1001, 229, 1509, 221, 366, 211, 493, 386, 150, 192, 139, 69, 113, 433, 4782, 93, 693, 1375, 1392, 605, 912, 3205, 467, 1231, 2173, 3155, 1893, 161, 669, 894, 19, 519, 991, 1282, 21, 1665, 427, 2038, 164, 2467, 1313, 392, 985, 721, 64, 1275, 525, 226, 15, 397, 354, 1492, 228, 66, 2609, 93, 96, 1526, 289, 580, 472, 246, 26, 272, 109, 1038, 520, 535, 230, 1019, 1172, 588, 698, 141, 1805, 866, 497, 223, 749, 227, 833, 474, 2046, 108]\n"
     ]
    }
   ],
   "source": [
    "print_all(100, 10000, 70, light=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  0%|          | 0/100 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have generated 100 formulas\n",
      "FastHumbleDPLL\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  1%|          | 1/100 [00:18<30:58, 18.77s/it]\u001b[A\n",
      "  2%|▏         | 2/100 [00:24<24:29, 14.99s/it]\u001b[A\n",
      "  3%|▎         | 3/100 [00:33<21:05, 13.05s/it]\u001b[A\n",
      "  4%|▍         | 4/100 [00:40<18:08, 11.34s/it]\u001b[A\n",
      "  5%|▌         | 5/100 [02:14<56:57, 35.97s/it]\u001b[A\n",
      "  6%|▌         | 6/100 [03:39<1:19:30, 50.75s/it]\u001b[A\n",
      "  7%|▋         | 7/100 [03:48<59:08, 38.16s/it]  \u001b[A\n",
      "  8%|▊         | 8/100 [03:53<43:23, 28.30s/it]\u001b[A\n",
      "  9%|▉         | 9/100 [04:00<33:18, 21.97s/it]\u001b[A\n",
      " 10%|█         | 10/100 [04:08<26:26, 17.63s/it]\u001b[A\n",
      " 11%|█         | 11/100 [04:19<23:23, 15.77s/it]\u001b[A"
     ]
    }
   ],
   "source": [
    "print_all(100, 10000, 90, light=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print_all(100, 10000, 110, light=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print_all(100, 10000, 130, light=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
